{"ast":null,"code":"import _slicedToArray from \"/Users/lucybirkhead/Desktop/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/lucybirkhead/Desktop/react-app/src/WeatherForecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport WeatherIcon from \"./WeatherIcon\";\nimport \"./WeatherForecast.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WeatherForecast(props) {\n  _s();\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        loaded = _useState2[0],\n        setLoaded = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        forecast = _useState4[0],\n        setForecast = _useState4[1];\n\n  function handleForecastResponse(response) {\n    setForecast(response.data);\n    setLoaded(true);\n  }\n\n  if (loaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"WeatherForecast row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [new Date(forecast.list[0].dt * 1000).getHours(), \":00\", /*#__PURE__*/_jsxDEV(WeatherIcon, {\n          code: forecast.list[0].weather[0].icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this), Math.round(forecast.list[0].main.temp), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [new Date(forecast.list[1].dt * 1000).getHours(), \":00\", /*#__PURE__*/_jsxDEV(WeatherIcon, {\n          code: forecast.list[1].weather[0].icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this), Math.round(forecast.list[1].main.temp), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [new Date(forecast.list[2].dt * 1000).getHours(), \":00\", /*#__PURE__*/_jsxDEV(WeatherIcon, {\n          code: forecast.list[2].weather[0].icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), Math.round(forecast.list[2].main.temp), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this);\n  } else {\n    let apiKey = \"19e635cfd49a09267430a421d97c1f42\";\n    let url = \"https://api.openweathermap.org/data/2.5/forecast?q=\".concat(props.city, \"&appid=\").concat(apiKey, \"&units=metric\");\n    axios.get(url).then(handleForecastResponse);\n    return null;\n  }\n}\n\n_s(WeatherForecast, \"20/pdcvQnLtcZUd5Lz9vhTDggVQ=\");\n\n_c = WeatherForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherForecast\");","map":{"version":3,"sources":["/Users/lucybirkhead/Desktop/react-app/src/WeatherForecast.js"],"names":["React","useState","axios","WeatherIcon","WeatherForecast","props","loaded","setLoaded","forecast","setForecast","handleForecastResponse","response","data","Date","list","dt","getHours","weather","icon","Math","round","main","temp","apiKey","url","city","get","then"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,uBAAP;;AAEA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAAA,oBACfJ,QAAQ,CAAC,KAAD,CADO;AAAA;AAAA,QACpCK,MADoC;AAAA,QAC5BC,SAD4B;;AAAA,qBAEfN,QAAQ,CAAC,IAAD,CAFO;AAAA;AAAA,QAExCO,QAFwC;AAAA,QAE9BC,WAF8B;;AAI/C,WAASC,sBAAT,CAAgCC,QAAhC,EAA0C;AACtCF,IAAAA,WAAW,CAACE,QAAQ,CAACC,IAAV,CAAX;AACAL,IAAAA,SAAS,CAAC,IAAD,CAAT;AACH;;AAED,MAAID,MAAJ,EAAY;AACR,wBACI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,mBACC,IAAIO,IAAJ,CAASL,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBC,EAAjB,GAAsB,IAA/B,EAAqCC,QAArC,EADD,sBAEA,QAAC,WAAD;AAAa,UAAA,IAAI,EAAER,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBG,OAAjB,CAAyB,CAAzB,EAA4BC;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAFA,EAGFC,IAAI,CAACC,KAAL,CAAWZ,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBO,IAAjB,CAAsBC,IAAjC,CAHE;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAMC;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,mBACI,IAAIT,IAAJ,CAASL,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBC,EAAjB,GAAsB,IAA/B,EAAqCC,QAArC,EADJ,sBAEG,QAAC,WAAD;AAAa,UAAA,IAAI,EAAER,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBG,OAAjB,CAAyB,CAAzB,EAA4BC;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAFH,EAGCC,IAAI,CAACC,KAAL,CAAWZ,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBO,IAAjB,CAAsBC,IAAjC,CAHD;AAAA;AAAA;AAAA;AAAA;AAAA,cAND,eAWC;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,mBACI,IAAIT,IAAJ,CAASL,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBC,EAAjB,GAAsB,IAA/B,EAAqCC,QAArC,EADJ,sBAEG,QAAC,WAAD;AAAa,UAAA,IAAI,EAAER,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBG,OAAjB,CAAyB,CAAzB,EAA4BC;AAA/C;AAAA;AAAA;AAAA;AAAA,gBAFH,EAGCC,IAAI,CAACC,KAAL,CAAWZ,QAAQ,CAACM,IAAT,CAAc,CAAd,EAAiBO,IAAjB,CAAsBC,IAAjC,CAHD;AAAA;AAAA;AAAA;AAAA;AAAA,cAXD;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAmBH,GApBD,MAoBO;AACH,QAAIC,MAAM,GAAG,kCAAb;AACA,QAAIC,GAAG,gEAAyDnB,KAAK,CAACoB,IAA/D,oBAA6EF,MAA7E,kBAAP;AACArB,IAAAA,KAAK,CAACwB,GAAN,CAAUF,GAAV,EAAeG,IAAf,CAAoBjB,sBAApB;AAEA,WAAO,IAAP;AACH;AAEA;;GArCuBN,e;;KAAAA,e","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport WeatherIcon from \"./WeatherIcon\";\nimport \"./WeatherForecast.css\";\n\nexport default function WeatherForecast(props) {\n    const [loaded, setLoaded] = useState(false);\nconst [forecast, setForecast] = useState(null);\n\nfunction handleForecastResponse(response) {\n    setForecast(response.data);\n    setLoaded(true);\n}\n\nif (loaded) {\n    return (\n        <div className=\"WeatherForecast row\">\n            <div className=\"col\">\n            {new Date(forecast.list[0].dt * 1000).getHours()}:00\n            <WeatherIcon code={forecast.list[0].weather[0].icon} />\n         {Math.round(forecast.list[0].main.temp)}°C\n         </div>\n         <div className=\"col\">\n            {new Date(forecast.list[1].dt * 1000).getHours()}:00\n            <WeatherIcon code={forecast.list[1].weather[0].icon} />\n         {Math.round(forecast.list[1].main.temp)}°C\n         </div>\n         <div className=\"col\">\n            {new Date(forecast.list[2].dt * 1000).getHours()}:00\n            <WeatherIcon code={forecast.list[2].weather[0].icon} />\n         {Math.round(forecast.list[2].main.temp)}°C\n         </div>\n         </div>\n    );\n} else {\n    let apiKey = \"19e635cfd49a09267430a421d97c1f42\";\n    let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\n    axios.get(url).then(handleForecastResponse);\n\n    return null;\n}\n   \n}\n\n"]},"metadata":{},"sourceType":"module"}